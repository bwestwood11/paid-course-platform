// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    isSystemAdmin Boolean      @default(false)
    image         String?
    accounts      Account[]
    sessions      Session[]
    submissions   Submission[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    watchlists    Watchlist[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Course {
    id               String      @id @default(cuid())
    title            String
    description      String
    priceInCents     Int
    courseLength     Int
    courseDifficulty String
    thumbnail        String
    tags             String[]
    starterCode      String
    createdAt        DateTime    @default(now())
    updatedAt        DateTime    @updatedAt
    trailer          Trailer?
    sections         Section[]
    challenges       Challenge[]
    quizzes          Quiz[]
    watchlists       Watchlist[]
}

model Trailer {
    id          String   @id @default(cuid())
    title       String
    description String
    videoUrl    String
    thumbnail   String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId    String   @unique
}

model Section {
    id             String    @id @default(cuid())
    title          String
    sequenceNumber Int
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    course         Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId       String
    chapters       Chapter[]
}

model Chapter {
    id             String   @id @default(cuid())
    title          String
    description    String
    videoUrl       String
    thumbnail      String
    sequenceNumber Int
    videoLength    Int
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    section        Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
    sectionId      String
}

model Quiz {
    id          String     @id @default(cuid())
    title       String
    description String
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    questions   Question[]
    course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId    String
}

model Question {
    id        String   @id @default(cuid())
    question  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    quizId    String
    options   Option[]
}

model Option {
    id         String   @id @default(cuid())
    option     String
    isCorrect  Boolean
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String
}

model Challenge {
    id          String       @id @default(cuid())
    title       String
    description String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    sourceCode  String
    submission  Submission[]
    course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId    String
}

model Submission {
    id          String    @id @default(cuid())
    sourceCode  String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    adminRating Int       @default(0)
    challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
    challengeId String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
}

model Watchlist {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    course    Course[]
}
